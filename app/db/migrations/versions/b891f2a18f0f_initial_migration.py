"""initial migration

Revision ID: b891f2a18f0f
Revises: 
Create Date: 2025-09-06 16:16:29.504700

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b891f2a18f0f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key'),
    sa.Column('uuid', sa.UUID(), nullable=False, comment='Public user identifier for external APIs'),
    sa.Column('email', sa.String(length=255), nullable=False, comment="User's primary email address (must be unique)"),
    sa.Column('email_verified', sa.Boolean(), server_default=sa.text('false'), nullable=False, comment='Whether the email has been verified'),
    sa.Column('phone_number', sa.String(length=20), nullable=True, comment='E.164 formatted phone number with country code (e.g., +1234567890)'),
    sa.Column('phone_verified', sa.Boolean(), server_default=sa.text('false'), nullable=False, comment='Whether the phone number has been verified'),
    sa.Column('hashed_password', sa.String(length=255), nullable=True, comment='Argon2 hashed password (nullable for OAuth users)'),
    sa.Column('username', sa.String(length=30), nullable=False, comment='Unique username (3-30 chars, alphanumeric + underscores)'),
    sa.Column('display_name', sa.String(length=100), nullable=True, comment="User's display name (2-100 chars)"),
    sa.Column('first_name', sa.String(length=50), nullable=True, comment="User's legal first name"),
    sa.Column('last_name', sa.String(length=50), nullable=True, comment="User's legal last name"),
    sa.Column('date_of_birth', sa.Date(), nullable=True, comment="User's date of birth (YYYY-MM-DD)"),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', 'NON_BINARY', 'OTHER', 'PREFER_NOT_TO_SAY', name='user_gender'), nullable=True, comment="User's self-identified gender"),
    sa.Column('profile_image_url', sa.Text(), nullable=True, comment="URL to the user's profile image"),
    sa.Column('cover_image_url', sa.Text(), nullable=True, comment="URL to the user's cover image"),
    sa.Column('bio', sa.Text(), nullable=True, comment="User's biography or description (max 500 chars)"),
    sa.Column('language', sa.String(length=10), server_default='en', nullable=False, comment='Preferred language code (ISO 639-1)'),
    sa.Column('timezone', sa.String(length=50), server_default='UTC', nullable=False, comment='IANA timezone name (e.g., America/New_York)'),
    sa.Column('measurement_system', sa.String(length=10), server_default='metric', nullable=False, comment='Preferred measurement system (metric/imperial)'),
    sa.Column('notification_preferences', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False, comment='User notification preferences as JSON'),
    sa.Column('privacy_settings', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False, comment='User privacy settings as JSON'),
    sa.Column('height_cm', sa.Float(), nullable=True, comment='Height in centimeters (50-250)'),
    sa.Column('weight_kg', sa.Float(), nullable=True, comment='Weight in kilograms (20-500)'),
    sa.Column('activity_level', sa.Enum('SEDENTARY', 'LIGHTLY_ACTIVE', 'MODERATELY_ACTIVE', 'VERY_ACTIVE', 'EXTRA_ACTIVE', name='user_activity_level'), nullable=True, comment="User's typical activity level"),
    sa.Column('fitness_goals', sa.ARRAY(sa.Enum('WEIGHT_LOSS', 'MUSCLE_GAIN', 'ENDURANCE', 'STRENGTH', 'FLEXIBILITY', 'GENERAL_FITNESS', 'SPORT_SPECIFIC', 'REHABILITATION', name='user_fitness_goal')), server_default='{}', nullable=True, comment="User's fitness objectives"),
    sa.Column('health_conditions', sa.ARRAY(sa.String(length=100)), server_default='{}', nullable=True, comment='List of health conditions or considerations'),
    sa.Column('role', sa.Enum('USER', 'COACH', 'ADMIN', 'STAFF', name='user_role', native_enum=False), server_default='user', nullable=False, comment="User's role in the system"),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'SUSPENDED', 'PENDING_VERIFICATION', 'DELETED', name='user_status', native_enum=False), server_default='pending_verification', nullable=False, comment='Account status (active, suspended, etc.)'),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False, comment='Soft delete flag'),
    sa.Column('is_superuser', sa.Boolean(), server_default=sa.text('false'), nullable=False, comment='Has superuser privileges'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the user account was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, comment='When the user account was last updated'),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True, comment='When the user last logged in'),
    sa.Column('last_activity_at', sa.DateTime(timezone=True), nullable=True, comment='When the user was last active on the platform'),
    sa.PrimaryKeyConstraint('id'),
    comment='Stores user account information and authentication details'
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=False)
    op.create_index('ix_users_email_lower', 'users', [sa.literal_column('lower(email)'), 'id'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index('ix_users_phone_number', 'users', ['phone_number', 'id'], unique=True, postgresql_where=sa.text('phone_number IS NOT NULL'))
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=False)
    op.create_index('ix_users_username_lower', 'users', [sa.literal_column('lower(username)'), 'id'], unique=True)
    op.create_index('ix_users_uuid', 'users', ['uuid', 'id'], unique=True)
    op.create_table('activities',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('activity_type', sa.Enum('RUNNING', 'WALKING', 'CYCLING', 'SWIMMING', 'WEIGHT_TRAINING', 'CIRCUIT_TRAINING', 'YOGA', 'PILATES', 'HIKING', 'DANCING', 'MARTIAL_ARTS', 'BOXING', 'CROSSFIT', 'ELLIPTICAL', 'ROWING', 'STAIR_CLIMBER', 'JUMP_ROPE', 'FUNCTIONAL_STRENGTH', 'OTHER', name='activitytype', native_enum=False), nullable=False),
    sa.Column('custom_activity_name', sa.String(), nullable=True),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('duration_minutes', sa.Integer(), nullable=True),
    sa.Column('distance_meters', sa.Float(), nullable=True),
    sa.Column('elevation_gain_meters', sa.Float(), nullable=True),
    sa.Column('elevation_loss_meters', sa.Float(), nullable=True),
    sa.Column('calories_burned', sa.Float(), nullable=True),
    sa.Column('average_heart_rate', sa.Integer(), nullable=True),
    sa.Column('max_heart_rate', sa.Integer(), nullable=True),
    sa.Column('perceived_exertion', sa.Integer(), nullable=True),
    sa.Column('average_power_watts', sa.Float(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('gps_data', sa.JSON(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_activities_id'), 'activities', ['id'], unique=False)
    op.create_index(op.f('ix_activities_user_id'), 'activities', ['user_id'], unique=False)
    op.create_table('daily_step_goals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('daily_step_goal', sa.Integer(), nullable=False),
    sa.Column('reminder_enabled', sa.Boolean(), nullable=True),
    sa.Column('reminder_time', sa.String(), nullable=True),
    sa.Column('auto_adjust_goal', sa.Boolean(), nullable=True),
    sa.Column('min_goal', sa.Integer(), nullable=True),
    sa.Column('max_goal', sa.Integer(), nullable=True),
    sa.Column('current_streak_days', sa.Integer(), nullable=True),
    sa.Column('best_streak_days', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_daily_step_goals_id'), 'daily_step_goals', ['id'], unique=False)
    op.create_index(op.f('ix_daily_step_goals_user_id'), 'daily_step_goals', ['user_id'], unique=True)
    op.create_table('health_goals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.Column('metric_type', sa.Enum('HEART_RATE', 'BLOOD_PRESSURE', 'BLOOD_OXYGEN', 'BODY_TEMPERATURE', 'RESPIRATORY_RATE', 'BODY_WEIGHT', 'BODY_HEIGHT', 'BMI', 'BODY_FAT_PERCENTAGE', 'MUSCLE_MASS', 'BONE_MASS', 'WATER_PERCENTAGE', 'BLOOD_GLUCOSE', 'FASTING_GLUCOSE', 'HBA1C', 'CHOLESTEROL', 'HDL_CHOLESTEROL', 'LDL_CHOLESTEROL', 'TRIGLYCERIDES', 'STEPS', 'ACTIVE_MINUTES', 'EXERCISE_MINUTES', 'CALORIES_BURNED', 'RESTING_HEART_RATE', 'VO2_MAX', 'SLEEP_QUALITY', 'SLEEP_DURATION', 'SLEEP_EFFICIENCY', 'DEEP_SLEEP_DURATION', 'REM_SLEEP_DURATION', 'SLEEP_SCORE', 'CALORIES_CONSUMED', 'PROTEIN_INTAKE', 'CARBS_INTAKE', 'FAT_INTAKE', 'FIBER_INTAKE', 'SUGAR_INTAKE', 'WATER_INTAKE', 'STRESS_LEVEL', 'MOOD', 'MOOD_LEVEL', 'ENERGY_LEVEL', 'PAIN_LEVEL', name='healthmetrictype'), nullable=False),
    sa.Column('target_value', sa.Float(), nullable=False),
    sa.Column('current_value', sa.Float(), nullable=True),
    sa.Column('unit', sa.String(length=20), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('target_date', sa.Date(), nullable=True),
    sa.Column('is_achieved', sa.Boolean(), nullable=True),
    sa.Column('progress_percentage', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_health_goals_id'), 'health_goals', ['id'], unique=False)
    op.create_index(op.f('ix_health_goals_user_id'), 'health_goals', ['user_id'], unique=False)
    op.create_table('health_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('metric_type', sa.Enum('HEART_RATE', 'BLOOD_PRESSURE', 'BLOOD_OXYGEN', 'BODY_TEMPERATURE', 'RESPIRATORY_RATE', 'BODY_WEIGHT', 'BODY_HEIGHT', 'BMI', 'BODY_FAT_PERCENTAGE', 'MUSCLE_MASS', 'BONE_MASS', 'WATER_PERCENTAGE', 'BLOOD_GLUCOSE', 'FASTING_GLUCOSE', 'HBA1C', 'CHOLESTEROL', 'HDL_CHOLESTEROL', 'LDL_CHOLESTEROL', 'TRIGLYCERIDES', 'STEPS', 'ACTIVE_MINUTES', 'EXERCISE_MINUTES', 'CALORIES_BURNED', 'RESTING_HEART_RATE', 'VO2_MAX', 'SLEEP_QUALITY', 'SLEEP_DURATION', 'SLEEP_EFFICIENCY', 'DEEP_SLEEP_DURATION', 'REM_SLEEP_DURATION', 'SLEEP_SCORE', 'CALORIES_CONSUMED', 'PROTEIN_INTAKE', 'CARBS_INTAKE', 'FAT_INTAKE', 'FIBER_INTAKE', 'SUGAR_INTAKE', 'WATER_INTAKE', 'STRESS_LEVEL', 'MOOD', 'MOOD_LEVEL', 'ENERGY_LEVEL', 'PAIN_LEVEL', name='healthmetrictype'), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('unit', sa.String(length=20), nullable=True),
    sa.Column('notes', sa.String(length=500), nullable=True),
    sa.Column('source', sa.String(length=100), nullable=True),
    sa.Column('device_id', sa.String(length=100), nullable=True),
    sa.Column('recorded_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_manual_entry', sa.Boolean(), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('raw_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_health_records_id'), 'health_records', ['id'], unique=False)
    op.create_index(op.f('ix_health_records_metric_type'), 'health_records', ['metric_type'], unique=False)
    op.create_index(op.f('ix_health_records_user_id'), 'health_records', ['user_id'], unique=False)
    op.create_table('health_scores',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('overall_score', sa.Float(), nullable=False),
    sa.Column('category_scores', sa.JSON(), nullable=True),
    sa.Column('metrics_considered', sa.JSON(), nullable=True),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('calculated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('notes', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_health_scores_date'), 'health_scores', ['date'], unique=False)
    op.create_index(op.f('ix_health_scores_id'), 'health_scores', ['id'], unique=False)
    op.create_index(op.f('ix_health_scores_user_id'), 'health_scores', ['user_id'], unique=False)
    op.create_table('refresh_tokens',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key'),
    sa.Column('token', sa.String(length=255), nullable=False, comment='Hashed refresh token'),
    sa.Column('parent_token', sa.String(length=255), nullable=True, comment='Hashed parent token (for token rotation)'),
    sa.Column('token_family', sa.String(length=64), nullable=False, comment='Token family identifier (for token family rotation)'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='Reference to the user this token belongs to'),
    sa.Column('is_revoked', sa.Boolean(), server_default='false', nullable=False, comment='Whether the token has been revoked'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the token was created'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False, comment='When the token expires'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'user_id'),
    comment='Tracks refresh tokens for token rotation',
    postgresql_partition_by='HASH (user_id)'
    )
    op.create_index(op.f('ix_refresh_tokens_id'), 'refresh_tokens', ['id'], unique=False)
    op.create_index('ix_refresh_tokens_parent_token', 'refresh_tokens', ['parent_token'], unique=False)
    op.create_index('ix_refresh_tokens_token', 'refresh_tokens', ['token', 'user_id'], unique=True)
    op.create_index(op.f('ix_refresh_tokens_token_family'), 'refresh_tokens', ['token_family'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_user_id'), 'refresh_tokens', ['user_id'], unique=False)
    op.create_table('sleep_goals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('target_sleep_duration_minutes', sa.Integer(), nullable=True),
    sa.Column('target_bedtime', sa.String(), nullable=True),
    sa.Column('target_wakeup_time', sa.String(), nullable=True),
    sa.Column('bedtime_reminder_enabled', sa.Boolean(), nullable=True),
    sa.Column('bedtime_reminder_minutes_before', sa.Integer(), nullable=True),
    sa.Column('wakeup_reminder_enabled', sa.Boolean(), nullable=True),
    sa.Column('ideal_sleep_start', sa.String(), nullable=True),
    sa.Column('ideal_sleep_end', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sleep_goals_id'), 'sleep_goals', ['id'], unique=False)
    op.create_index(op.f('ix_sleep_goals_user_id'), 'sleep_goals', ['user_id'], unique=True)
    op.create_table('sleep_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('timezone', sa.String(), nullable=True),
    sa.Column('sleep_score', sa.Integer(), nullable=True),
    sa.Column('sleep_efficiency', sa.Float(), nullable=True),
    sa.Column('total_sleep_minutes', sa.Integer(), nullable=True),
    sa.Column('awake_minutes', sa.Integer(), nullable=True),
    sa.Column('light_sleep_minutes', sa.Integer(), nullable=True),
    sa.Column('deep_sleep_minutes', sa.Integer(), nullable=True),
    sa.Column('rem_sleep_minutes', sa.Integer(), nullable=True),
    sa.Column('sleep_latency_minutes', sa.Integer(), nullable=True),
    sa.Column('sleep_interruptions', sa.Integer(), nullable=True),
    sa.Column('environment_noise_level', sa.Integer(), nullable=True),
    sa.Column('room_temperature_c', sa.Float(), nullable=True),
    sa.Column('room_humidity', sa.Float(), nullable=True),
    sa.Column('caffeine_intake_hours_before', sa.Float(), nullable=True),
    sa.Column('alcohol_consumption', sa.Boolean(), nullable=True),
    sa.Column('stress_level', sa.Integer(), nullable=True),
    sa.Column('device_name', sa.String(), nullable=True),
    sa.Column('raw_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sleep_records_id'), 'sleep_records', ['id'], unique=False)
    op.create_index(op.f('ix_sleep_records_user_id'), 'sleep_records', ['user_id'], unique=False)
    op.create_table('step_records',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('steps', sa.Integer(), nullable=False),
    sa.Column('distance_meters', sa.Float(), nullable=False),
    sa.Column('calories_burned', sa.Float(), nullable=True),
    sa.Column('active_minutes', sa.Integer(), nullable=False),
    sa.Column('hourly_steps', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_step_records_date'), 'step_records', ['date'], unique=False)
    op.create_index(op.f('ix_step_records_id'), 'step_records', ['id'], unique=False)
    op.create_index(op.f('ix_step_records_user_id'), 'step_records', ['user_id'], unique=False)
    op.create_table('user_relationships',
    sa.Column('follower_id', sa.Integer(), nullable=False, comment='User who is following'),
    sa.Column('followed_id', sa.Integer(), nullable=False, comment='User who is being followed'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the relationship was created'),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['followed_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['follower_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('follower_id', 'followed_id', 'id'),
    sa.UniqueConstraint('follower_id', 'followed_id', name='uq_follower_followed'),
    comment='Tracks follower/following relationships between users'
    )
    op.create_index(op.f('ix_user_relationships_id'), 'user_relationships', ['id'], unique=False)
    op.create_table('user_sessions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='Reference to the user this session belongs to'),
    sa.Column('session_id', sa.String(length=255), nullable=False, comment='Unique session identifier (JTI claim)'),
    sa.Column('refresh_token', sa.String(length=255), nullable=True, comment='Hashed refresh token (for refresh token rotation)'),
    sa.Column('user_agent', sa.Text(), nullable=True, comment='User agent string from the client'),
    sa.Column('ip_address', sa.String(length=45), nullable=True, comment='IP address of the client'),
    sa.Column('location', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Geolocation data derived from IP address'),
    sa.Column('device_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Device information (OS, browser, etc.)'),
    sa.Column('is_revoked', sa.Boolean(), server_default='false', nullable=False, comment='Whether the session has been revoked'),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True, comment='When the session was last used'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the session was created'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False, comment='When the session expires'),
    sa.Column('refresh_expires_at', sa.DateTime(timezone=True), nullable=True, comment='When the refresh token expires'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'user_id', name='pk_user_sessions'),
    comment='Tracks active user sessions for authentication',
    postgresql_partition_by='HASH (user_id)'
    )
    op.create_index(op.f('ix_user_sessions_id'), 'user_sessions', ['id'], unique=False)
    op.create_index('ix_user_sessions_refresh_token', 'user_sessions', ['refresh_token', 'user_id'], unique=True)
    op.create_index(op.f('ix_user_sessions_session_id'), 'user_sessions', ['session_id'], unique=False)
    op.create_index('ix_user_sessions_user_id', 'user_sessions', ['user_id'], unique=False)
    op.create_table('walking_sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('steps', sa.Integer(), nullable=False),
    sa.Column('distance_meters', sa.Float(), nullable=False),
    sa.Column('calories_burned', sa.Float(), nullable=True),
    sa.Column('active_minutes', sa.Integer(), nullable=True),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('gps_data', sa.JSON(), nullable=True),
    sa.Column('elevation_gain_meters', sa.Float(), nullable=True),
    sa.Column('elevation_loss_meters', sa.Float(), nullable=True),
    sa.Column('average_pace_seconds_per_km', sa.Float(), nullable=True),
    sa.Column('average_speed_kmh', sa.Float(), nullable=True),
    sa.Column('average_heart_rate', sa.Integer(), nullable=True),
    sa.Column('max_heart_rate', sa.Integer(), nullable=True),
    sa.Column('device_name', sa.String(), nullable=True),
    sa.Column('is_tracked', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_walking_sessions_id'), 'walking_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_walking_sessions_user_id'), 'walking_sessions', ['user_id'], unique=False)
    op.create_table('water_intake_goals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('daily_goal_ml', sa.Float(), nullable=False),
    sa.Column('reminder_enabled', sa.Boolean(), nullable=True),
    sa.Column('reminder_start_time', sa.String(), nullable=True),
    sa.Column('reminder_end_time', sa.String(), nullable=True),
    sa.Column('reminder_interval_minutes', sa.Integer(), nullable=True),
    sa.Column('last_reminder_sent', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_water_intake_goals_id'), 'water_intake_goals', ['id'], unique=False)
    op.create_index(op.f('ix_water_intake_goals_user_id'), 'water_intake_goals', ['user_id'], unique=True)
    op.create_table('water_intakes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('amount_ml', sa.Float(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('source', sa.String(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_water_intakes_id'), 'water_intakes', ['id'], unique=False)
    op.create_index(op.f('ix_water_intakes_user_id'), 'water_intakes', ['user_id'], unique=False)
    op.create_table('workout_plans',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('days_of_week', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workout_plans_id'), 'workout_plans', ['id'], unique=False)
    op.create_index(op.f('ix_workout_plans_user_id'), 'workout_plans', ['user_id'], unique=False)
    op.create_table('sleep_stage_entries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sleep_record_id', sa.Integer(), nullable=False),
    sa.Column('stage', sa.Enum('AWAKE', 'LIGHT', 'DEEP', 'REM', 'OUT_OF_BED', name='sleepstage'), nullable=False),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('duration_seconds', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['sleep_record_id'], ['sleep_records.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sleep_stage_entries_id'), 'sleep_stage_entries', ['id'], unique=False)
    op.create_index(op.f('ix_sleep_stage_entries_sleep_record_id'), 'sleep_stage_entries', ['sleep_record_id'], unique=False)
    op.create_table('workout_plan_exercises',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('plan_id', sa.Integer(), nullable=False),
    sa.Column('exercise_name', sa.String(), nullable=False),
    sa.Column('exercise_type', sa.Enum('RUNNING', 'WALKING', 'CYCLING', 'SWIMMING', 'WEIGHT_TRAINING', 'CIRCUIT_TRAINING', 'YOGA', 'PILATES', 'HIKING', 'DANCING', 'MARTIAL_ARTS', 'BOXING', 'CROSSFIT', 'ELLIPTICAL', 'ROWING', 'STAIR_CLIMBER', 'JUMP_ROPE', 'FUNCTIONAL_STRENGTH', 'OTHER', name='activitytype'), nullable=False),
    sa.Column('target_sets', sa.Integer(), nullable=True),
    sa.Column('target_reps', sa.String(), nullable=True),
    sa.Column('target_weight_kg', sa.Float(), nullable=True),
    sa.Column('target_duration_seconds', sa.Integer(), nullable=True),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.Column('rest_time_seconds', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['plan_id'], ['workout_plans.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workout_plan_exercises_id'), 'workout_plan_exercises', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_workout_plan_exercises_id'), table_name='workout_plan_exercises')
    op.drop_table('workout_plan_exercises')
    op.drop_index(op.f('ix_sleep_stage_entries_sleep_record_id'), table_name='sleep_stage_entries')
    op.drop_index(op.f('ix_sleep_stage_entries_id'), table_name='sleep_stage_entries')
    op.drop_table('sleep_stage_entries')
    op.drop_index(op.f('ix_workout_plans_user_id'), table_name='workout_plans')
    op.drop_index(op.f('ix_workout_plans_id'), table_name='workout_plans')
    op.drop_table('workout_plans')
    op.drop_index(op.f('ix_water_intakes_user_id'), table_name='water_intakes')
    op.drop_index(op.f('ix_water_intakes_id'), table_name='water_intakes')
    op.drop_table('water_intakes')
    op.drop_index(op.f('ix_water_intake_goals_user_id'), table_name='water_intake_goals')
    op.drop_index(op.f('ix_water_intake_goals_id'), table_name='water_intake_goals')
    op.drop_table('water_intake_goals')
    op.drop_index(op.f('ix_walking_sessions_user_id'), table_name='walking_sessions')
    op.drop_index(op.f('ix_walking_sessions_id'), table_name='walking_sessions')
    op.drop_table('walking_sessions')
    op.drop_index('ix_user_sessions_user_id', table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_session_id'), table_name='user_sessions')
    op.drop_index('ix_user_sessions_refresh_token', table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_id'), table_name='user_sessions')
    op.drop_table('user_sessions')
    op.drop_index(op.f('ix_user_relationships_id'), table_name='user_relationships')
    op.drop_table('user_relationships')
    op.drop_index(op.f('ix_step_records_user_id'), table_name='step_records')
    op.drop_index(op.f('ix_step_records_id'), table_name='step_records')
    op.drop_index(op.f('ix_step_records_date'), table_name='step_records')
    op.drop_table('step_records')
    op.drop_index(op.f('ix_sleep_records_user_id'), table_name='sleep_records')
    op.drop_index(op.f('ix_sleep_records_id'), table_name='sleep_records')
    op.drop_table('sleep_records')
    op.drop_index(op.f('ix_sleep_goals_user_id'), table_name='sleep_goals')
    op.drop_index(op.f('ix_sleep_goals_id'), table_name='sleep_goals')
    op.drop_table('sleep_goals')
    op.drop_index(op.f('ix_refresh_tokens_user_id'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_token_family'), table_name='refresh_tokens')
    op.drop_index('ix_refresh_tokens_token', table_name='refresh_tokens')
    op.drop_index('ix_refresh_tokens_parent_token', table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_id'), table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    op.drop_index(op.f('ix_health_scores_user_id'), table_name='health_scores')
    op.drop_index(op.f('ix_health_scores_id'), table_name='health_scores')
    op.drop_index(op.f('ix_health_scores_date'), table_name='health_scores')
    op.drop_table('health_scores')
    op.drop_index(op.f('ix_health_records_user_id'), table_name='health_records')
    op.drop_index(op.f('ix_health_records_metric_type'), table_name='health_records')
    op.drop_index(op.f('ix_health_records_id'), table_name='health_records')
    op.drop_table('health_records')
    op.drop_index(op.f('ix_health_goals_user_id'), table_name='health_goals')
    op.drop_index(op.f('ix_health_goals_id'), table_name='health_goals')
    op.drop_table('health_goals')
    op.drop_index(op.f('ix_daily_step_goals_user_id'), table_name='daily_step_goals')
    op.drop_index(op.f('ix_daily_step_goals_id'), table_name='daily_step_goals')
    op.drop_table('daily_step_goals')
    op.drop_index(op.f('ix_activities_user_id'), table_name='activities')
    op.drop_index(op.f('ix_activities_id'), table_name='activities')
    op.drop_table('activities')
    op.drop_index('ix_users_uuid', table_name='users')
    op.drop_index('ix_users_username_lower', table_name='users')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index('ix_users_phone_number', table_name='users', postgresql_where=sa.text('phone_number IS NOT NULL'))
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index('ix_users_email_lower', table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
